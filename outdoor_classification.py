# -*- coding: utf-8 -*-
"""Outdoor_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DUUAlN_Mpo6vhsIuGHSqz7zioitl2aZI
"""

pip install tensorflow

import tensorflow as tf
from tensorflow.keras.applications import MobileNet

model = MobileNet(weights='imagenet')

model.summary()

image_urls = [item['photo_url'] for item in data if 'photo_url' in item and item['photo_url']]

print(image_urls)

import json
import requests
from tensorflow.keras.preprocessing import image
from PIL import Image
from io import BytesIO
import numpy as np

file_path = 'Geo_Pic.json'

with open(file_path, 'r', encoding='utf-8') as file:
    data = json.load(file)

outdoor_images = []

def classify_image(url):
    response = requests.get(url)
    img = Image.open(BytesIO(response.content))
    img_resized = img.resize((224, 224))
    img_resized = img_resized.convert('RGB')
    img_array = image.img_to_array(img_resized)
    img_array = np.expand_dims(img_array, axis=0) / 255.0
    predictions = model.predict(img_array)
    return "Outdoor" if predictions[0][0] > 0.5 else "Indoor"

for item in data:
    if 'photo_url' in item and item['photo_url']:
        result = classify_image(item['photo_url'])
        if result == "Outdoor":
            outdoor_images.append(item)

output_file_path = 'outdoor_images.json'
with open(output_file_path, 'w', encoding='utf-8') as output_file:
    json.dump(outdoor_images, output_file, ensure_ascii=False, indent=4)

print(f"Outdoor images saved to '{output_file_path}'.")

import json
import requests
import torch
from PIL import Image
from io import BytesIO

model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

file_path = 'Geo_Pic.json'

# Load the JSON data from the file
with open(file_path, 'r', encoding='utf-8') as file:
    data = json.load(file)

outdoor_images = []

indoor_classes = [
    "chair", "table", "sofa","lamp", "book", "desk",
    "armchair", "cabinet", "shelf", "stool", "couch", "wardrobe", "desk chair",
    "dining table", "painting", "mirror", "vase", "curtain", "rug",
    "sink", "door"
]

outdoor_classes = [
    "tree", "car", "person", "dog", "cat", "bicycle", "flower", "road",
    "grass", "bush", "plant",  "leaf", "bus", "truck", "motorcycle",
    "train", "horse", "building", "bridge",
    "fence", "pathway", "mountain", "lake"
]


def classify_image(url):
    response = requests.get(url)
    img = Image.open(BytesIO(response.content))


    results = model(img)


    class_labels = results.names
    detected_classes = results.pred[0][:, -1].tolist()

    indoor_count = 0
    outdoor_count = 0


    for class_index in detected_classes:
        class_name = class_labels[int(class_index)]
        if class_name in indoor_classes:
            indoor_count += 1
        elif class_name in outdoor_classes:
            outdoor_count += 1

    if outdoor_count > indoor_count:
        return "Outdoor"
    elif indoor_count > outdoor_count:
        return "Indoor"
    else:
        return "Unknown"

for item in data:
    if 'photo_url' in item and item['photo_url']:
        result = classify_image(item['photo_url'])
        if result == "Outdoor":
            outdoor_images.append(item)

output_file_path = 'outdoor_images.json'
with open(output_file_path, 'w', encoding='utf-8') as output_file:
    json.dump(outdoor_images, output_file, ensure_ascii=False, indent=4)

print(f"Outdoor images saved to '{output_file_path}'.")

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5
# %cd yolov5
!pip install -r requirements.txt